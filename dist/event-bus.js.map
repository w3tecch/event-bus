{"version":3,"sources":["event-bus.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"event-bus.js","sourcesContent":["/*\n * event-bus 1.0.0\n * \n * \n *\n * Copyright 2015, gery.hirschfeld@w3tec.ch\n * Released under the MIT license.\n*/\n\n\"use strict\";\n/**\n * This is the EventBus service. This service isn't bound to the NG dependency/injection system\n *\n * @export\n * @class EventBus\n */\nvar EventBus = (function () {\n    /**\n     * Creates an instance of EventBus.\n     */\n    function EventBus() {\n        this._callbacks = {};\n    }\n    /**\n     * Returns a list off all currently registerd callbacks\n     *\n     * @returns {{ [event: string]: IEventBusCallback[] }}\n     */\n    EventBus.prototype.list = function () {\n        return this._callbacks;\n    };\n    /**\n     * Let's you publishes an event to a specific channel\n     *\n     * @param {string} channel\n     * @returns {(...args) => boolean}\n     */\n    EventBus.prototype.publish = function (channel) {\n        var _this = this;\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var callbacks = _this._callbacks[channel] || [];\n            var size = callbacks.length;\n            callbacks.forEach(function (cb) { return cb.apply(void 0, args); });\n            return size < callbacks.length;\n        };\n    };\n    /**\n     * Let's you subscribe to a specific channel\n     *\n     * @param {string} channel\n     * @returns {(callback: IEventBusCallback) => () => boolean}\n     */\n    EventBus.prototype.subscribe = function (channel) {\n        var _this = this;\n        return function (callback) {\n            var callbacks = _this._callbacks[channel] || (_this._callbacks[channel] = []);\n            callbacks.push(callback);\n            // destroy function\n            return function () {\n                var idx = callbacks.indexOf(callback);\n                if (idx >= 0) {\n                    callbacks.splice(idx, 1);\n                }\n                if (callbacks.length === 0) {\n                    delete _this._callbacks[channel];\n                }\n                return idx >= 0;\n            };\n        };\n    };\n    return EventBus;\n}());\nexports.EventBus = EventBus;\n/**\n * Export the Service\n */\nexports.eventBusService = new EventBus();\n"],"sourceRoot":"/source/"}